#!/usr/bin/python
# -*- coding: utf-8 -*-
##
## This file is part of Invenio.
## Copyright (C) 2016 CERN.
##
## Invenio is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## Invenio is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Invenio; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

""" Bibcheck plugin to check emails in 100__m and 700__m of HEP records against 
  HEPNames records and add associated INSPIRE-IDs and ORCIDs to 100__i/j and 700__i/j
  while removing 100__m and 700__m
"""

from invenio.search_engine import perform_request_search
from invenio.bibrecord import print_rec, record_get_field_instances, \
     record_add_field
from invenio.bibformat_engine import BibFormatObject

test_records = []

def get_id(record, id_type=None):
    """Returns any id with a HEPNames recid"""
    author_id = None
    for item in BibFormatObject(record).fields('035__'):
        if item.has_key('9') and item['9'] == id_type and item.has_key('a'):
            author_id = item['a']
    return author_id

def convert_email_to_id(email):
    """Returns the INSPIRE ID and the ORCID from a search for email in HEPNames"""
    inspire_id = None
    orcid      = None
    emailsearch = '371__m:%s or 371__o:%s or 595__o:%s or 595__m:%s'
    reclist = perform_request_search(p = \
        emailsearch % (email, email, email, email), cc='HepNames')
    if len(reclist) == 1:
      recid = int(reclist[0])
      inspire_id = get_id(recid, id_type='INSPIRE')
      orcid      = get_id(recid, id_type='ORCID')
      return (inspire_id, orcid)


def check_record(record):
"""gets emails from author fields in record and tries to match them with INSPIRE-ID/ORCID from HEPNames"""
  tags = ('100__', '700__')
  for tag in tags:
    field_instances = record_get_field_instances(record, \
                                                 tag[0:3], tag[3], tag[4])
    for field_instance in field_instances:
      new_value = None
      for code, value in field_instance[0]:
        if code == 'm':
          email = value
          new_value = convert_email_to_id(value)
          if new_value[0]:
            if 'INSPIRE' in val for code, val in field_instance[0]:
              if val == new_value[0]:
                pass
              else:
                record.warn("%s from HEPNames doesn't match id for author %s in record %s" % (new_value[0], email, recid))
            else:
              value = new_value[0]
              code = 'i'
              flag = True
              record_add_subfield_into(record, tag, code, value, field_position_local=field_instance[0])
          if new_value[1]:
            value = 'ORCID:' + new_value[1]
            if 'ORCID' in val for code, val in field_instance[0]:
              if val == value:
                pass
              else
                record.warn("%s from HEPNames doesn't match id for author %s in record %s" % (new_value[1], email, recid))
            else:
              code = 'j'
              flag = True
              record_add_subfield_into(record, tag, code, value, field_position_local=field_instance[0])

if __name__ == '__main__':
    for record in test_records:
      check_record(record)
